require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe RealProblemsController, :type => :controller do

  # This should return the minimal set of attributes required to create a valid
  # RealProblem. As you add validations to RealProblem, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {title: "Title", description: "Description"}
  }

  let(:invalid_attributes) {
    {title: "", description: "Description"}
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # RealProblemsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET index" do
    it "assigns all real_problems as @real_problems" do
      real_problem = RealProblem.create! valid_attributes
      get :index, {}, valid_session
      expect(assigns(:real_problems)).to eq([real_problem])
    end
  end

  describe "GET show" do
    it "assigns the requested real_problem as @real_problem" do
      real_problem = RealProblem.create! valid_attributes
      get :show, {:id => real_problem.to_param}, valid_session
      expect(assigns(:real_problem)).to eq(real_problem)
    end
  end

  describe "GET new" do
    it "assigns a new real_problem as @real_problem" do
      get :new, {}, valid_session
      expect(assigns(:real_problem)).to be_a_new(RealProblem)
    end
  end

  describe "GET edit" do
    it "assigns the requested real_problem as @real_problem" do
      real_problem = RealProblem.create! valid_attributes
      get :edit, {:id => real_problem.to_param}, valid_session
      expect(assigns(:real_problem)).to eq(real_problem)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new RealProblem" do
        expect {
          post :create, {:real_problem => valid_attributes}, valid_session
        }.to change(RealProblem, :count).by(1)
      end

      it "assigns a newly created real_problem as @real_problem" do
        post :create, {:real_problem => valid_attributes}, valid_session
        expect(assigns(:real_problem)).to be_a(RealProblem)
        expect(assigns(:real_problem)).to be_persisted
      end

      it "redirects to the created real_problem" do
        post :create, {:real_problem => valid_attributes}, valid_session
        expect(response).to redirect_to(RealProblem.last)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved real_problem as @real_problem" do
        post :create, {:real_problem => invalid_attributes}, valid_session
        expect(assigns(:real_problem)).to be_a_new(RealProblem)
      end

      it "re-renders the 'new' template" do
        post :create, {:real_problem => invalid_attributes}, valid_session
        expect(response).to render_template("new")
      end
    end

    describe "with create_www" do
      it "create a real problem" do
        count = RealProblem.count
        post :create_ww, {real_problem: valid_attributes}
        expect(RealProblem.count).to eq(count+1)
      end

      it "redirecty to steps1_2" do
        post :create_ww, {real_problem: valid_attributes}
        expect(response).to redirect_to(controller: "steps", action: "show", id: "step1_2", rp_id: assigns(:real_problem).id)
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      let(:new_attributes) {
        {title: "New Title", description: "Description"}
      } 

      it "updates the requested real_problem" do
        real_problem = RealProblem.create! valid_attributes
        put :update, {:id => real_problem.to_param, :real_problem => new_attributes}, valid_session
        real_problem.reload
        expect(real_problem.attributes).to include(new_attributes.stringify_keys)
      end

      it "assigns the requested real_problem as @real_problem" do
        real_problem = RealProblem.create! valid_attributes
        put :update, {:id => real_problem.to_param, :real_problem => valid_attributes}, valid_session
        expect(assigns(:real_problem)).to eq(real_problem)
      end

      it "redirects to the real_problem" do
        real_problem = RealProblem.create! valid_attributes
        put :update, {:id => real_problem.to_param, :real_problem => valid_attributes}, valid_session
        expect(response).to redirect_to(real_problem)
      end

      describe "with update_ww" do
        it "updates the real problem" do
          real_problem = RealProblem.create! valid_attributes
          put :update_ww, {id: real_problem, real_problem: new_attributes}
        end

        it "redirect to step1_2" do
          real_problem = RealProblem.create! valid_attributes
          put :update_ww, {id: real_problem, real_problem: new_attributes}
          expect(response).to redirect_to(controller: "steps", action: "show", id:"step1_2", rp_id: assigns(:real_problem).id)
        end
      end
    end

    describe "with invalid params" do
      it "assigns the real_problem as @real_problem" do
        real_problem = RealProblem.create! valid_attributes
        put :update, {:id => real_problem.to_param, :real_problem => invalid_attributes}, valid_session
        expect(assigns(:real_problem)).to eq(real_problem)
      end

      it "re-renders the 'edit' template" do
        real_problem = RealProblem.create! valid_attributes
        put :update, {:id => real_problem.to_param, :real_problem => invalid_attributes}, valid_session
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested real_problem" do
      real_problem = RealProblem.create! valid_attributes
      expect {
        delete :destroy, {:id => real_problem.to_param}, valid_session
      }.to change(RealProblem, :count).by(-1)
    end

    it "redirects to the real_problems list" do
      real_problem = RealProblem.create! valid_attributes
      delete :destroy, {:id => real_problem.to_param}, valid_session
      expect(response).to redirect_to(real_problems_url)
    end
  end

end
