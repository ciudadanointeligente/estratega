require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe AsksController, :type => :controller do

  before(:each) do
    @activity = create(:activity)
    @ask = create(:ask)
    @activity.asks.append(@ask)
    @activity.save
  end

  let(:valid_session) { {} }

  describe "GET index" do
    it "assigns all asks as @asks" do
      get :index, {activity_id: @activity}, valid_session
      expect(assigns(:asks)).to eq([@ask])
    end
  end

  describe "GET show" do
    it "assigns the requested ask as @ask" do
      get :show, {activity_id: @activity, id: @ask}, valid_session
      expect(assigns(:ask)).to eq(@ask)
    end
  end

  describe "GET new" do
    it "assigns a new ask as @ask" do
      get :new, {activity_id: @activity}, valid_session
      expect(assigns(:ask)).to be_a_new(Ask)
    end
  end

  describe "GET edit" do
    it "assigns the requested ask as @ask" do
      get :edit, {activity_id: @activity, id: @ask}, valid_session
      expect(assigns(:ask)).to eq(@ask)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new Ask" do
        expect {
          post :create, {activity_id: @activity, ask: attributes_for(:ask)}, valid_session
        }.to change(Ask, :count).by(1)
      end

      it "assigns a newly created ask as @ask" do
        post :create, {activity_id: @activity, ask: attributes_for(:ask)}, valid_session
        expect(assigns(:ask)).to be_a(Ask)
        expect(assigns(:ask)).to be_persisted
      end

      it "redirects to the created ask" do
        post :create, {activity_id: @activity, ask: attributes_for(:ask)}, valid_session
        expect(response).to redirect_to activity_ask_path(@activity, Ask.last)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved ask as @ask" do
        post :create, {activity_id: @activity, ask: attributes_for(:invalid_ask)}, valid_session
        expect(assigns(:ask)).to be_a_new(Ask)
      end

      it "re-renders the 'new' template" do
        post :create, {activity_id: @activity, ask: attributes_for(:invalid_ask)}, valid_session
        expect(response).to render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested ask" do
        put :update, {activity_id: @activity, id: @ask, ask: attributes_for(:edit_ask)}, valid_session
        @ask.reload
        expect(@ask.attributes).to include(attributes_for(:edit_ask).stringify_keys)
      end

      it "assigns the requested ask as @ask" do
        put :update, {activity_id: @activity, id: @ask, ask: attributes_for(:edit_ask)}, valid_session
        expect(assigns(:ask)).to eq(@ask)
      end

      it "redirects to the ask" do
        put :update, {activity_id: @activity, id: @ask, ask: attributes_for(:edit_ask)}, valid_session
        expect(response).to redirect_to activity_ask_path(@activity, @ask)
      end
    end

    describe "with invalid params" do
      it "assigns the ask as @ask" do
        put :update, {activity_id: @activity, id: @ask, ask: attributes_for(:invalid_ask)}, valid_session
        expect(assigns(:ask)).to eq(@ask)
      end

      it "re-renders the 'edit' template" do
        put :update, {activity_id: @activity, id: @ask, ask: attributes_for(:invalid_ask)}, valid_session
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested ask" do
      expect {
        delete :destroy, {activity_id: @activity, id: @ask}, valid_session
      }.to change(Ask, :count).by(-1)
    end

    it "redirects to the parent activity" do
      delete :destroy, {activity_id: @activity, id: @ask}, valid_session
      expect(response).to redirect_to activity_path(@activity)
    end
  end

end
