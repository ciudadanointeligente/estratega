require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe PolicySolutionsController, :type => :controller do

  # This should return the minimal set of attributes required to create a valid
  # PolicySolution. As you add validations to PolicySolution, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {title: "a title", description: "a description"}
  }

  let(:invalid_attributes) {
    {title: "", description: ""}
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # PolicySolutionsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  before(:each) do
    @real_problem = create(:real_problem)
    @policy_problem = create(:policy_problem)
    @policy_solution = create(:policy_solution)
    @policy_problem.policy_solutions.append @policy_solution
    @real_problem.policy_problems.append @policy_problem
    @policy_problem.save
    @real_problem.save
  end

  describe "GET index" do
    it "assigns all policy_solutions of a policy_problem as @policy_solutions" do
      create(:policy_solution)
      get :index, {real_problem_id: @real_problem, policy_problem_id: @policy_problem}, valid_session
      expect(assigns(:policy_solutions)).to eq([@policy_solution])
    end
  end

  describe "GET show" do
    it "assigns the requested policy_solution as @policy_solution" do
      get :show, {real_problem_id: @real_problem, policy_problem_id: @policy_problem, id: @policy_solution}, valid_session
      expect(assigns(:policy_solution)).to eq(@policy_solution)
    end
  end

  describe "GET new" do
    it "assigns a new policy_solution as @policy_solution" do
      get :new, {real_problem_id: @real_problem, policy_problem_id: @policy_problem}, valid_session
      expect(assigns(:policy_solution)).to be_a_new(PolicySolution)
    end
  end

  describe "GET edit" do
    it "assigns the requested policy_solution as @policy_solution" do
      get :edit, {real_problem_id: @real_problem, policy_problem_id: @policy_problem, id: @policy_solution}, valid_session
      expect(assigns(:policy_solution)).to eq(@policy_solution)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new PolicySolution" do
        expect {
          post :create, {real_problem_id: @real_problem, policy_problem_id: @policy_problem, policy_solution: attributes_for(:policy_solution)}, valid_session
        }.to change(PolicySolution, :count).by(1)
      end

      it "assigns a newly created policy_solution as @policy_solution" do
        post :create, {real_problem_id: @real_problem, policy_problem_id: @policy_problem, policy_solution: attributes_for(:policy_solution)}, valid_session
        expect(assigns(:policy_solution)).to be_a(PolicySolution)
        expect(assigns(:policy_solution)).to be_persisted
      end

      it "redirects to the created policy_solution" do
        post :create, {real_problem_id: @real_problem, policy_problem_id: @policy_problem, policy_solution: attributes_for(:policy_solution)}, valid_session
        expect(response).to redirect_to real_problem_policy_problem_policy_solution_path(@real_problem, @policy_problem, PolicySolution.last)
      end

      it "links policy_solution to a policy_problem" do
        expect{
          post :create, {real_problem_id: @real_problem, policy_problem_id: @policy_problem, policy_solution: attributes_for(:policy_solution)}, valid_session
        }.to change(@policy_problem.policy_solutions, :count).by(1)
        expect(assigns(:policy_solution).policy_problem_id).to eq(@policy_problem.id)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved policy_solution as @policy_solution" do
        post :create, {real_problem_id: @real_problem, policy_problem_id: @policy_problem, policy_solution: attributes_for(:invalid_policy_solution)}, valid_session
        expect(assigns(:policy_solution)).to be_a_new(PolicySolution)
      end

      it "re-renders the 'new' template" do
        post :create, {real_problem_id: @real_problem, policy_problem_id: @policy_problem, policy_solution: attributes_for(:invalid_policy_solution)}, valid_session
        expect(response).to render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do

      it "updates the requested policy_solution" do
        put :update, {real_problem_id: @real_problem, policy_problem_id: @policy_problem, id: @policy_solution, policy_solution: attributes_for(:edit_policy_solution)}, valid_session
        @policy_solution.reload
        expect(assigns(:policy_solution).attributes).to include(attributes_for(:edit_policy_solution).stringify_keys)
      end

      it "assigns the requested policy_solution as @policy_solution" do
        put :update, {real_problem_id: @real_problem, policy_problem_id: @policy_problem, id: @policy_solution, policy_solution: attributes_for(:edit_policy_solution)}, valid_session
        expect(assigns(:policy_solution)).to eq(@policy_solution)
      end

      it "redirects to the policy_solution" do
        put :update, {real_problem_id: @real_problem, policy_problem_id: @policy_problem, id: @policy_solution, policy_solution: attributes_for(:edit_policy_solution)}, valid_session
        expect(response).to redirect_to real_problem_policy_problem_policy_solution_path(@real_problem, @policy_problem, @policy_solution)
      end
    end

    describe "with invalid params" do
      it "assigns the policy_solution as @policy_solution" do
        put :update, {real_problem_id: @real_problem, policy_problem_id: @policy_problem, id: @policy_solution, policy_solution: attributes_for(:invalid_policy_solution)}, valid_session
        expect(assigns(:policy_solution)).to eq(@policy_solution)
      end

      it "re-renders the 'edit' template" do
        put :update, {real_problem_id: @real_problem, policy_problem_id: @policy_problem, id: @policy_solution, policy_solution: attributes_for(:invalid_policy_solution)}, valid_session
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested policy_solution" do
      expect {
        delete :destroy, {real_problem_id: @real_problem, policy_problem_id: @policy_problem, id: @policy_solution}, valid_session
      }.to change(PolicySolution, :count).by(-1)
    end

    it "redirects to the policy_solutions list within a policy_problem" do
      delete :destroy, {real_problem_id: @real_problem, policy_problem_id: @policy_problem, id: @policy_solution}, valid_session
      expect(response).to redirect_to real_problem_policy_problem_url(@real_problem, @policy_problem)
    end
  end

end
