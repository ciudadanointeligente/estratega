require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe ResourcesController, :type => :controller do

  before(:each) do
    @project = create(:project)
    @resource = create(:resource)
    @project.resources << @resource
  end

  describe "GET index" do
    it "assigns all resources as @resources" do
      get :index, {project_id: @project}
      expect(assigns(:resources)).to eq([@resource])
    end
  end

  describe "GET show" do
    it "assigns the requested resource as @resource" do
      get :show, {project_id: @project, id: @resource}
      expect(assigns(:resource)).to eq(@resource)
    end
  end

  describe "GET new" do
    it "assigns a new resource as @resource" do
      get :new, {project_id: @project}
      expect(assigns(:resource)).to be_a_new(Resource)
    end
  end

  describe "GET edit" do
    it "assigns the requested resource as @resource" do
      get :edit, {project_id: @project, id: @resource}
      expect(assigns(:resource)).to eq(@resource)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new Resource" do
        expect {
          post :create, {project_id: @project, resource: attributes_for(:resource)}
        }.to change(Resource, :count).by(1)
      end

      it "assigns a newly created resource as @resource" do
        post :create, {project_id: @project, resource: attributes_for(:resource)}
        expect(assigns(:resource)).to be_a(Resource)
        expect(assigns(:resource)).to be_persisted
      end

      it "redirects to the created resource" do
        post :create, {project_id: @project, resource: attributes_for(:resource)}
        expect(response).to redirect_to([@project, Resource.last])
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved resource as @resource" do
        post :create, {project_id: @project, resource: attributes_for(:invalid_resource)}
        expect(assigns(:resource)).to be_a_new(Resource)
      end

      it "re-renders the 'new' template" do
        post :create, {project_id: @project, resource: attributes_for(:invalid_resource)}
        expect(response).to render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do

      it "updates the requested resource" do
        put :update, {project_id: @project, id: @resource, resource: attributes_for(:edit_resource)}
        @resource.reload
        expect(assigns(:resource).attributes).to include(attributes_for(:edit_resource).stringify_keys)
      end

      it "assigns the requested resource as @resource" do
        put :update, {project_id: @project, id: @resource, resource: attributes_for(:edit_resource)}
        expect(assigns(:resource)).to eq(@resource)
      end

      it "redirects to the resource" do
        put :update, {project_id: @project, id: @resource, resource: attributes_for(:edit_resource)}
        expect(response).to redirect_to([@project, @resource])
      end
    end

    describe "with invalid params" do
      it "assigns the resource as @resource" do
        put :update, {project_id: @project, id: @resource, resource: attributes_for(:invalid_resource)}
        expect(assigns(:resource)).to eq(@resource)
      end

      it "re-renders the 'edit' template" do
        put :update, {project_id: @project, id: @resource, resource: attributes_for(:invalid_resource)}
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested resource" do
      expect {
        delete :destroy, {project_id: @project, id: @resource}
      }.to change(Resource, :count).by(-1)
    end

    it "redirects to the resources list" do
      delete :destroy, {project_id: @project, id: @resource}
      expect(response).to redirect_to(project_resources_url(@project))
    end
  end

end
